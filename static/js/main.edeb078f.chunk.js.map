{"version":3,"sources":["Components/CreateNewPost.jsx","Components/ModifyPost.jsx","Components/Post.jsx","Components/DisplayAllPosts.jsx","App.js","serviceWorker.js","index.js"],"names":["CreateNewPost","props","onSubmit","savePost","type","onChange","savePostTitleToState","placeholder","size","required","ref","getTitle","savePostContentToState","rows","cols","getContent","ModifyPost","defaultValue","title","text","content","onClick","updatePost","Post","editPost","id","deletePost","DisplayAllPosts","useState","setTitle","setContent","allPosts","setAllPosts","isCreateNewPost","setIsCreateNewPost","isModifyPost","setIsModifyPost","editPostId","setEditPostId","useRef","event","target","value","console","log","toggleCreateNewPost","toggleModifyPostComponent","modifiedPost","filter","eachPost","preventDefault","current","post","find","updatedPost","map","length","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edeb078f.chunk.js","sourcesContent":["import React from \"react\";\r\nconst CreateNewPost = props => {\r\n  return (\r\n    <>\r\n      <form onSubmit={props.savePost}>\r\n        <h1>Create New Post</h1>\r\n        <input\r\n          type=\"text\"\r\n          onChange={props.savePostTitleToState}\r\n          placeholder=\"title\"\r\n          size=\"39\"\r\n          required\r\n          ref={props.getTitle}\r\n        ></input>\r\n        <br />\r\n        <br />\r\n        <textarea\r\n          onChange={props.savePostContentToState}\r\n          placeholder=\"contents\"\r\n          rows=\"8\"\r\n          cols=\"41\"\r\n         required\r\n          ref={props.getContent}\r\n        ></textarea>\r\n        <br />\r\n        <br />\r\n        <button>Save Post</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nexport default CreateNewPost;","import React from \"react\";\r\nconst ModifyPost = props => {\r\n  return (\r\n    <>\r\n      <form>\r\n        <h1>Modify Post</h1>\r\n        <input\r\n          defaultValue={props.title}\r\n          onChange={props.savePostTitleToState}\r\n          text\r\n          placeholder=\"title\"\r\n          size=\"39\"\r\n        ></input>\r\n        <br />\r\n        <br />\r\n        <textarea\r\n          defaultValue={props.content}\r\n          placeholder=\"contents\"\r\n          onChange={props.savePostContentToState}\r\n          rows=\"8\"\r\n          cols=\"41\"\r\n        ></textarea>\r\n        <br />\r\n        <br />\r\n        <button onClick ={props.updatePost}>Update Post</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nexport default ModifyPost;","import React from 'react';\r\n\r\n\r\nconst Post = ({ title, content, editPost, id, deletePost}) => {\r\n  return (\r\n    <>\r\n      <section>\r\n        <h3>{title}</h3>\r\n        <p> {content}</p>\r\n        <button onClick={() => editPost(id)}>Edit</button>\r\n        <button onClick={() => deletePost(id)}>Delete</button>\r\n\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default Post;","import React, { useState, useRef } from \"react\";\r\nimport CreateNewPost from \"./CreateNewPost\";\r\nimport ModifyPost from \"./ModifyPost\"\r\nimport Post from \"./Post\";\r\nconst DisplayAllPosts = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [allPosts, setAllPosts] = useState([]);\r\n  const [isCreateNewPost, setIsCreateNewPost] = useState(false);\r\n  const [isModifyPost, setIsModifyPost] = useState(false);\r\n  const [editPostId, setEditPostId] = useState(\"\");\r\n\r\n  // Initialize useRef\r\n  const getTitle = useRef();\r\n  const getContent = useRef();\r\n\r\n  const savePostTitleToState = event => {\r\n    setTitle(event.target.value);\r\n    console.log(title)\r\n  };\r\n  const savePostContentToState = event => {\r\n    setContent(event.target.value);\r\n    console.log(content)\r\n  };\r\n  const toggleCreateNewPost = () => {\r\n    setIsCreateNewPost(!isCreateNewPost);\r\n  };\r\n  const toggleModifyPostComponent = () => {\r\n    setIsModifyPost(!isModifyPost)\r\n  }\r\n  \r\n  const editPost = id => {\r\n    setEditPostId(id);\r\n    toggleModifyPostComponent();\r\n  };\r\n  \r\n  const deletePost = id => {\r\n    const modifiedPost = allPosts.filter(eachPost => {\r\n      return eachPost.id !== id;\r\n    });\r\n    setAllPosts(modifiedPost);\r\n  };\r\n\r\n  const updatePost = (event) => {\r\n    event.preventDefault();\r\n    const updatedPost = allPosts.map(eachPost => {\r\n      if (eachPost.id === editPostId) {\r\n        return {\r\n          ...eachPost,\r\n          title: title || eachPost.title,\r\n          content: content || eachPost.content\r\n        };\r\n      }\r\n      return eachPost;\r\n    });\r\n    setAllPosts(updatedPost);\r\n    toggleModifyPostComponent();\r\n  };\r\n  const savePost = event => {\r\n    event.preventDefault();\r\n    setAllPosts([...allPosts, { title, content }]);\r\n    console.log(allPosts);\r\n    getTitle.current.value = \"\";\r\n    getContent.current.value = \"\";\r\n    toggleCreateNewPost();\r\n  };\r\n  if (isCreateNewPost) {\r\n    return (\r\n      <>\r\n        <CreateNewPost\r\n          savePostTitleToState={savePostTitleToState}\r\n          savePostContentToState={savePostContentToState}\r\n          getTitle={getTitle}\r\n          getContent={getContent}\r\n          savePost={savePost}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  else if (isModifyPost) {\r\n    const post = allPosts.find(post => {\r\n      return post.id === editPostId;\r\n    });\r\n    return (\r\n      <ModifyPost\r\n        title={post.title}\r\n        content={post.content}\r\n        updatePost={updatePost}\r\n        savePostTitleToState={savePostTitleToState}\r\n        savePostContentToState={savePostContentToState}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n<>\r\n      <h2>All Posts</h2>\r\n      {!allPosts.length ? (\r\n        <div>\r\n          <h3>There is nothing to see here!</h3>\r\n        </div>\r\n      ) : (\r\n        allPosts.map(eachPost => {\r\n          return (\r\n            <Post\r\n              id={eachPost.id}\r\n              key={eachPost.id}\r\n              title={eachPost.title}\r\n              content={eachPost.content}\r\n              editPost={editPost}\r\n              deletePost={deletePost}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n\r\n      <br />\r\n      <br />\r\n      <button onClick={toggleCreateNewPost}>Create New</button>\r\n    </>\r\n  );\r\n};\r\nexport default DisplayAllPosts;","import React from \"react\";\n// import Posts from './Components/Post'\n// import CreateNewPosts from './Components/CreateNewPost'\nimport DisplayAllPosts from './Components/DisplayAllPosts'\nconst App = ( ) => {\n  return (\n    <>\n      <DisplayAllPosts/>\n    </>\n  );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}